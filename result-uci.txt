Benchmarking the recursive version...
# JMH version: 1.22
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.UCIDatasetBenchmark.run

# Run progress: 0.00% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
Iteration   1: 0.213 ms/op
Iteration   2: 0.213 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.217 ms/op
Iteration   5: 0.217 ms/op
Iteration   6: 0.217 ms/op
Iteration   7: 0.217 ms/op
Iteration   8: 0.217 ms/op
Iteration   9: 0.217 ms/op
Iteration  10: 0.217 ms/op


Result "org.sample.UCIDatasetBenchmark.run":
  0.216 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.213, 0.216, 0.217), stdev = 0.002
  CI (99.9%): [0.214, 0.219] (assumes normal distribution)


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt  Score   Error  Units
UCIDatasetBenchmark.run  avgt   10  0.216 ± 0.003  ms/op
Benchmarking the loop version...
# JMH version: 1.22
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.UCIDatasetBenchmark.run

# Run progress: 0.00% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.213 ms/op
Iteration   1: 0.211 ms/op
Iteration   2: 0.211 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.211 ms/op
Iteration   5: 0.211 ms/op
Iteration   6: 0.211 ms/op
Iteration   7: 0.211 ms/op
Iteration   8: 0.211 ms/op
Iteration   9: 0.211 ms/op
Iteration  10: 0.211 ms/op


Result "org.sample.UCIDatasetBenchmark.run":
  0.211 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.211, 0.211, 0.211), stdev = 0.001
  CI (99.9%): [0.211, 0.211] (assumes normal distribution)


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt  Score    Error  Units
UCIDatasetBenchmark.run  avgt   10  0.211 ±  0.001  ms/op
Benchmarking the recursive version...
# JMH version: 1.22
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.UCIDatasetBenchmark.run

# Run progress: 0.00% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 8.761 ms/op
Iteration   1: 8.663 ms/op
Iteration   2: 8.681 ms/op
Iteration   3: 8.651 ms/op
Iteration   4: 8.660 ms/op
Iteration   5: 8.670 ms/op
Iteration   6: 8.677 ms/op
Iteration   7: 8.671 ms/op
Iteration   8: 8.678 ms/op
Iteration   9: 8.673 ms/op
Iteration  10: 8.669 ms/op


Result "org.sample.UCIDatasetBenchmark.run":
  8.669 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (8.651, 8.669, 8.681), stdev = 0.009
  CI (99.9%): [8.655, 8.683] (assumes normal distribution)


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt  Score   Error  Units
UCIDatasetBenchmark.run  avgt   10  8.669 ± 0.014  ms/op
Benchmarking the loop version...
# JMH version: 1.22
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.UCIDatasetBenchmark.run

# Run progress: 0.00% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 8.224 ms/op
Iteration   1: 8.182 ms/op
Iteration   2: 8.174 ms/op
Iteration   3: 8.198 ms/op
Iteration   4: 8.177 ms/op
Iteration   5: 8.200 ms/op
Iteration   6: 8.188 ms/op
Iteration   7: 8.198 ms/op
Iteration   8: 8.194 ms/op
Iteration   9: 8.196 ms/op
Iteration  10: 8.184 ms/op


Result "org.sample.UCIDatasetBenchmark.run":
  8.189 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (8.174, 8.189, 8.200), stdev = 0.009
  CI (99.9%): [8.175, 8.203] (assumes normal distribution)


# Run complete. Total time: 00:01:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt  Score   Error  Units
UCIDatasetBenchmark.run  avgt   10  8.189 ± 0.014  ms/op

